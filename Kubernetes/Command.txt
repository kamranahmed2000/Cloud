----------------------------------------------
#Kubernetes - GKE
A cluster consists of a Kubernetes master API server hosted by Google and a set of worker nodes. 
The worker nodes are Compute Engine virtual machines.

#Create a cluster with two n1-standard-1 nodes.
This command creates a GKE cluster named hello-world with 2 nodes, each using the e2-medium machine type, in the specified Google Cloud zone.
gcloud container clusters create hello-world \
                --num-nodes 2 \
                --machine-type e2-medium \
                --zone "ZONE"
----------------------------------------------
Create your pod
A Kubernetes pod is a group of containers tied together for administration and networking purposes. 
It can contain single or multiple containers. 

kubectl create deployment hello-node \
    --image=gcr.io/PROJECT_ID/hello-node:v1

Deployments are the recommended way to create and scale pods

#To view the deployment, run:
kubectl get deployments

#To view the pod created by the deployment, run:
kubectl get pods

#kubectl commands
kubectl cluster-info
kubectl config view

And for troubleshooting :
kubectl get events
kubectl logs <pod-name>
----------------------------------------------    
From Cloud Shell you can expose the pod to the public internet with the kubectl expose command combined with the --type="LoadBalancer" flag. 
This flag is required for the creation of an externally accessible IP:

kubectl expose deployment hello-node --type="LoadBalancer" --port=8080

To find the publicly-accessible IP address of the service, request kubectl to list all the cluster services:
kubectl get services
----------------------------------------------
Scale up your service

Set the number of replicas for your pod:
kubectl scale deployment hello-node --replicas=4

kubectl get deployment

List all the pods
kubectl get pods
----------------------------------------------
Kubernetes will smoothly update your replication controller to the new version of the application. 
In order to change the image label for your running container, 
you will edit the existing hello-node deployment and change the image from gcr.io/PROJECT_ID/hello-node:v1 to gcr.io/PROJECT_ID/hello-node:v2.

kubectl edit deployment hello-node



